import asyncio
import logging
import time
import os
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.keys import Keys
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.service import Service

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
TELEGRAM_BOT_TOKEN = "" # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ BotFather
TELEGRAM_CHAT_ID = ""  # –∞–π–¥–∏ —á–∞—Ç–∞, –∫—É–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
MAX_LOGIN_URL = "https://web.max.ru/" # –ù–ï –ò–ó–ú–ï–ù–Ø–¢–¨, –±–æ—Ç –∑–∞—Ö–æ–¥–∏—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
MAX_USERNAME = ""  #  –ë–ï–ó +7  –¢–û–õ–¨–ö–û 9991234567

# ===== –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è =====
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('max_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class MaxMonitorBot:
    def __init__(self):
        self.bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
        self.dp = Dispatcher()
        self.driver = None
        self.is_monitoring = False
        self.processed_messages = set()
        self.awaiting_verification = False

        self.dp.message.register(self.cmd_start, Command("start"))
        self.dp.message.register(self.cmd_stop, Command("stop"))
        self.dp.message.register(self.cmd_status, Command("status"))
        self.dp.message.register(self.cmd_code, Command("code"))

    def setup_driver(self):
        #–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ chrome –±—Ä–∞—É–∑–µ—Ä–∞
        try:
            service = Service(ChromeDriverManager().install())

            chrome_options = Options()
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument("--window-size=1920,1080")
            chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")

            # –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —É–±–∏—Ä–∞–µ–º headless —Ä–µ–∂–∏–º
            # chrome_options.add_argument("--headless")

            driver = webdriver.Chrome(service=service, options=chrome_options)
            driver.implicitly_wait(10)

            logger.info("‚úÖ chrome –±—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω")
            return driver

        except Exception as e:
            logger.error(f"‚ùå –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return None

    async def login_to_max(self):
        """–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ max """
        try:
            logger.info("üîê –æ—Ç–∫—Ä—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É max")
            self.driver.get(MAX_LOGIN_URL)
            await asyncio.sleep(3)  # –∂–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏

            # –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            self.driver.save_screenshot("debug_login_page.png")
            logger.info("üì∏ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

            # –∂–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            WebDriverWait(self.driver, 30).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )

            logger.info("üì± –∏—â—É –ø–æ–ª–µ –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")

            # —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–ª—è –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            phone_selectors = [
                "input[type='tel']",
                "input[type='text']",
                "input[name='phone']",
                "input[placeholder*='—Ç–µ–ª–µ—Ñ–æ–Ω']",
                "input[placeholder*='phone']"
            ]

            phone_field = None
            for selector in phone_selectors:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    for element in elements:
                        if element.is_displayed() and element.is_enabled():
                            phone_field = element
                            logger.info(f"‚úÖ –Ω–∞—à–µ–ª –ø–æ–ª–µ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {selector}")
                            break
                    if phone_field:
                        break
                except:
                    continue

            if not phone_field:
                logger.error("‚ùå –Ω–µ –Ω–∞—à–µ–ª –ø–æ–ª–µ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
                return "error"

            # –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            phone_field.clear()
            phone_field.send_keys(MAX_USERNAME)
            logger.info("‚úÖ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–≤–µ–¥–µ–Ω")
            await asyncio.sleep(2)

            # —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ "–í–æ–π—Ç–∏"
            button_selectors = [
                "//button[contains(text(), '–í–æ–π—Ç–∏')]",
                "//button[contains(text(), 'Continue')]",
                "//button[@type='submit']",
                "//button[contains(@class, 'button')]",
                "//button[contains(@class, 'submit')]"
            ]

            login_button = None
            for selector in button_selectors:
                try:
                    elements = self.driver.find_elements(By.XPATH, selector)
                    for element in elements:
                        if element.is_displayed() and element.is_enabled():
                            login_button = element
                            logger.info(f"‚úÖ –Ω–∞—à–µ–ª –∫–Ω–æ–ø–∫—É: {selector}")
                            break
                    if login_button:
                        break
                except:
                    continue

            if not login_button:
                # –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –Ω–∞–π—Ç–∏ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É
                all_buttons = self.driver.find_elements(By.TAG_NAME, "button")
                for button in all_buttons:
                    if button.is_displayed():
                        login_button = button
                        logger.info("‚úÖ –Ω–∞—à–µ–ª –∫–∞–∫—É—é-—Ç–æ –∫–Ω–æ–ø–∫—É")
                        break

            if login_button:
                # –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ javascript (–Ω–∞–¥–µ–∂–Ω–µ–µ)
                self.driver.execute_script("arguments[0].click();", login_button)
                logger.info("‚úÖ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞")
            else:
                # –µ—Å–ª–∏ –∫–Ω–æ–ø–∫—É –Ω–µ –Ω–∞—à–ª–∏ - –ø—Ä–æ–±—É–µ–º –Ω–∞–∂–∞—Ç—å enter
                phone_field.send_keys(Keys.ENTER)
                logger.info("‚úÖ –Ω–∞–∂–∞–ª enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞")

            await asyncio.sleep(5)

            # –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
            self.driver.save_screenshot("debug_after_login.png")

            # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –ø–æ–ª—è –¥–ª—è sms –∫–æ–¥–∞ (6 –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π)
            try:
                code_fields = WebDriverWait(self.driver, 15).until(
                    EC.presence_of_all_elements_located((By.CSS_SELECTOR,
                                                         "input[type='text'][inputmode='numeric'], "
                                                         "input[type='number'], "
                                                         "input[maxlength='1']"))
                )

                if len(code_fields) >= 4:  # –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–π –¥–ª—è —Ü–∏—Ñ—Ä
                    logger.info(f"üìã –Ω–∞—à–µ–ª {len(code_fields)} –ø–æ–ª–µ–π –¥–ª—è sms –∫–æ–¥–∞")
                    self.awaiting_verification = True

                    await self.bot.send_message(
                        chat_id=TELEGRAM_CHAT_ID,
                        text="üîê <b>—Ç—Ä–µ–±—É–µ—Ç—Å—è sms –∫–æ–¥ –æ—Ç max!</b>\n\n"
                             "–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                             "<code>/code 123456</code>\n\n"
                             "–≥–¥–µ 123456 - –∫–æ–¥ –∏–∑ sms"
                    )
                    return "awaiting_code"

            except Exception as e:
                logger.info(f"‚ö†Ô∏è –ø–æ–ª—è –¥–ª—è –∫–æ–¥–∞ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å: {e}")

            # –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –±–µ–∑ –∫–æ–¥–∞
            try:
                WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, ".chat, .message, [class*='chat']"))
                )
                logger.info("‚úÖ –≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –±–µ–∑ –∫–æ–¥–∞")
                return "success"
            except:
                logger.error("‚ùå –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏")
                return "error"

        except Exception as e:
            logger.error(f"‚ùå –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏
            try:
                self.driver.save_screenshot("debug_error.png")
            except:
                pass
            return "error"

    async def enter_sms_code(self, code):
        """–≤–≤–æ–¥ 6-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è"""
        try:
            logger.info(f"üîÑ –Ω–∞—á–∏–Ω–∞—é –≤–≤–æ–¥ –∫–æ–¥–∞: {code}")

            # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–¥ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 6 —Ü–∏—Ñ—Ä
            if len(code) != 6 or not code.isdigit():
                logger.error("‚ùå –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 6 —Ü–∏—Ñ—Ä")
                return False

            # –∏—â–µ–º –≤—Å–µ 6 –ø–æ–ª–µ–π –¥–ª—è –≤–≤–æ–¥–∞ —Ü–∏—Ñ—Ä
            code_fields = WebDriverWait(self.driver, 10).until(
                EC.presence_of_all_elements_located((By.CSS_SELECTOR,
                                                     "input[type='text'][inputmode='numeric'], "
                                                     "input[type='number'], "
                                                     "input[maxlength='1']"))
            )

            logger.info(f"‚úÖ –Ω–∞—à–µ–ª {len(code_fields)} –ø–æ–ª–µ–π –¥–ª—è –≤–≤–æ–¥–∞")

            # –≤–≤–æ–¥–∏–º –∫–æ–¥ –ø–æ –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä–µ –≤ –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ
            for i, digit in enumerate(code):
                if i < len(code_fields):
                    code_fields[i].clear()
                    code_fields[i].send_keys(digit)
                    await asyncio.sleep(0.3)  # –ø–∞—É–∑–∞ –º–µ–∂–¥—É –≤–≤–æ–¥–æ–º —Ü–∏—Ñ—Ä

            logger.info(f"‚úÖ –∫–æ–¥ {code} –≤–≤–µ–¥–µ–Ω")

            # –∏—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirm_buttons = self.driver.find_elements(By.XPATH,
                                                        "//button[contains(text(), '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')] | "
                                                        "//button[contains(text(), 'Confirm')] | "
                                                        "//button[@type='submit']")

            for button in confirm_buttons:
                if button.is_displayed() and button.is_enabled():
                    self.driver.execute_script("arguments[0].click();", button)
                    logger.info("‚úÖ –∫–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∂–∞—Ç–∞")
                    break

            self.awaiting_verification = False
            await asyncio.sleep(5)

            # –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
            try:
                WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, ".chat, .message, [class*='chat']"))
                )
                logger.info("‚úÖ –≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            except:
                logger.warning("‚ö†Ô∏è –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")
                return True

        except Exception as e:
            logger.error(f"‚ùå –æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞: {e}")
            return False

    async def monitor_messages(self):
        """–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        logger.info("üëÄ –Ω–∞—á–∏–Ω–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π")

        while self.is_monitoring:
            try:
                # –∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
                message_selectors = [
                    "[class*='message']",
                    "[class*='msg']",
                    ".message",
                    ".msg",
                    "[role='listitem']"
                ]

                messages = []
                for selector in message_selectors:
                    try:
                        found = self.driver.find_elements(By.CSS_SELECTOR, selector)
                        if found:
                            messages.extend(found)
                    except:
                        continue

                # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                for message_element in messages[-10:]:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
                    try:
                        message_text = message_element.text.strip()
                        if message_text and len(message_text) > 10:  # —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–µ–∫—Å—Ç—ã

                            # —Å–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id
                            message_id = hash(message_text[:100])

                            if message_id not in self.processed_messages:
                                # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
                                await self.bot.send_message(
                                    chat_id=TELEGRAM_CHAT_ID,
                                    text=f"üì© <b>–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ max</b>\n\n{message_text}"
                                )
                                logger.info(f"üì§ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text[:50]}...")
                                self.processed_messages.add(message_id)

                    except Exception as e:
                        continue

                # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
                if len(self.processed_messages) > 100:
                    self.processed_messages = set(list(self.processed_messages)[-50:])

                await asyncio.sleep(3)

            except Exception as e:
                logger.error(f"‚ùå –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(5)

    # –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    async def cmd_start(self, message: Message):
        """–∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if self.is_monitoring:
            await message.answer("‚úÖ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        await message.answer("üîÑ –∑–∞–ø—É—Å–∫–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ max...")

        self.driver = self.setup_driver()
        if not self.driver:
            await message.answer("‚ùå –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞")
            return

        result = await self.login_to_max()

        if result == "success":
            self.is_monitoring = True
            asyncio.create_task(self.monitor_messages())
            await message.answer("‚úÖ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω! –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è —Å—é–¥–∞")
        elif result == "awaiting_code":
            await message.answer("üìã –∂–¥—É sms –∫–æ–¥. –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /code 123456")
        else:
            await message.answer("‚ùå –æ—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏")

    async def cmd_stop(self, message: Message):
        """–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_monitoring = False
        if self.driver:
            self.driver.quit()
            self.driver = None
        self.processed_messages.clear()
        await message.answer("‚èπ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def cmd_status(self, message: Message):
        """—Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã"""
        status = "üü¢ –∞–∫—Ç–∏–≤–µ–Ω" if self.is_monitoring else "üî¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        await message.answer(f"{status}\n—Å–æ–æ–±—â–µ–Ω–∏–π: {len(self.processed_messages)}")

    async def cmd_code(self, message: Message):
        """–≤–≤–æ–¥ sms –∫–æ–¥–∞"""
        if not self.awaiting_verification:
            await message.answer("‚ùå –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            return

        code = message.text.replace('/code', '').strip()

        if not code.isdigit() or len(code) != 6:
            await message.answer("‚ùå –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞. –ø—Ä–∏–º–µ—Ä: /code 123456")
            return

        await message.answer(f"üîÑ –≤–≤–æ–∂—É –∫–æ–¥ {code}...")
        success = await self.enter_sms_code(code)

        if success:
            self.is_monitoring = True
            asyncio.create_task(self.monitor_messages())
            await message.answer("‚úÖ –∫–æ–¥ –ø—Ä–∏–Ω—è—Ç! –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
        else:
            await message.answer("‚ùå –æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞. –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

    async def run(self):
        """–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("ü§ñ –∑–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞")
        await self.dp.start_polling(self.bot)


async def main():
    bot = MaxMonitorBot()
    await bot.run()


if __name__ == "__main__":
    asyncio.run(main())